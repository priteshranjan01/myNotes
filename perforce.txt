https://stackoverflow.com/questions/17267218/perforce-for-git-users

Git is distributed, Perforce is centralized. That creates all the differences.
git checkout -> perforce sync
git commit -> perforce submit
perforce depot -> a repository of files that live in a perforce server.
perforce workspace or client is an object in the system that maps a set of files
in the Perforce server to a location on a user's file system.

'workspace view' specifies the set of files in the depot that should be mapped
 to the local machine.

Explicit checkout vs Implicit Checkout.

The GIT way of making changes where ever I want and then do a git diff to see
 the changes is not the normal way in Perforce. See 'allwrite' option in
 perforce to enable such behavior. You have to first specify which file you want
 to edit by p4 edit command. P4 diff shows the changes you have made.

Explicit checkout is when you tell perforce the restricted set of files that you
 will be working with. This is the recommended way to work. p4 edit/add/delete
 then p4 submit.

git stash -> p4 shelve
git local branching -> either perforce shelves or task branches
git blame -> p4 annotate or perforce timelapse view from the GUI

https://www.perforce.com/perforce/r14.2/manuals/p4guide/chapter.files.html
To change files in the depot, you open them in a changelist, make any changes
to the files, and then submit the changelist. A changelist contains a list of
files, their revision numbers, and the operations to be performed on the files.
Unsubmitted changelists are referred to as pending changelists.

By default opened files are placed in a default changelist.
To specify a changelist use
$ p4 edit -c <changelist_number> <filename>

Reopen a file in different changelist:
$ p4 reopen -c <new_changelist_number> <filenames>

Deleting Changelists:
$ p4 change -d <changenumber>

Creating numbered changelist:
$ p4 change # Will open a changelist form to enter the description.
$ p4 submit -c <changelist_number>

Create a Bug on OneBug. Note the bug number.
$ p4 fix -s FIXED -c <changelist_number> <OneBug number only the numerals>
Then submit
$ p4 submit -c <changelist_number>

To remove files from the changelist and discard any changes:
$ p4 revert -c <changelist_number>

Renaming and moving files:
$ p4 move source_file target_file

Shelve- temporarily preserve work in progress for your own use, or for review
by others. Shelving enables you to temporarily cache files in the shared service
 without formally submitting them to the depot.

$ p4 edit <filename>
Make changes.
# Shelve the changes. The output will contain a shelve number. This shelve
# number is the identifier to the set of changes in this shelve.
$ p4 shelve
# Unshelve the changelist (123) in a new changelist (124).
$ p4 unshelve -s 123 -c 124 <filename>
# Submit the changelist to the server.
$ p4 submit -c 124
# Shelve a changelist (when you want to switch task.)
$ p4 shelve -c changelist_number
# Discard the shelved files:
$ p4 shelve -d -c 124
# Afterward delete the changelist itself.
# Update files in a shelved changelist. Can be done on the same client.
$ p4 shelve -r -c 708774
# On the other workspace, issue this to load the changes.
$ p4 unshelve -s 708774
# Now there would be reolve conflicts. Better approach is to revert the changes
from outdated changelist and load the current changelist.

# Submit a changelist with shelved files: https://stackoverflow.com/questions/15877984/fastest-way-of-submitting-shelved-changelist
p4 shelve -c #changelist -d
p4 submit -c #changelist

Perfoce LOL: The first step gives the scary response "Shelved change 111111 deleted." Don't worry, the changelist still exists, and the files are still in it. It's just no longer "shelved"

TIP: Always move the shelved files into a new pending changelist before
submitting that changelist.
Delete a pending changelist:
$> p4 change -d changenum

Displaying information about changelists
$> p4 changes -m <count>
$> p4 changes -s <status>
$> p4 changes -u priteshr
$> p4 changes -c prit_mac
$> p4 describe <changenum>
$> p4 describe -S <changenum> # to display the diff also.

Lock a file so that no other user can submit the changes:
If no file argument is provided, all open files in the default changelist are locked.
$> p4 lock -c <changelist_number>
$> p4 lock -c <changelist_number> <filename>

Unlock all files in a changelist:
$> p4 unlock -c <changelist_number>
$> p4 unlock -c <changelist_number> -f <filename>


To invoke "p4 edit" on the current opened file
:!p4 edit %

To integrate between branches
1. p4 integrate -o /<from depot>…@<Change list number>,@<change list number> <to depot>...
EXAMPLE: p4 integrate -o //depot/main/rs_121_NGS/usr.src/...@722356,@722356 //depot/main/TOT/usr.src/...
2. P4 resolve…
3. P4 change (put all opened files in default change list to a new changelist)
4. P4 submit <change list number>


To rename files:

$> p4 rename file_old_name file_new_name


Assuming that you have a changelist in perforce now and would like to post a review. Here is the command to do it:
rbt post --debug --disable-ssl-verification --server https://reviewboard.citrite.net/ --username priteshr --password Madhav@123 --p4-port sjcpperforce04.citrite.net:1666 --p4-client "prit_mac" 739773
