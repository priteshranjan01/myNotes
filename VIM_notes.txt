Nice read for refreshing VIM tricks: https://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim
Vim no plugin (How to Do 90% of What Plugins Do (With Just Vim)): https://www.youtube.com/watch?v=XA2WjJbmmoM

-----------------------------------------------------------------------------------------------------------------
Open file in read only mode:
	vim -R file_name
	or vim -M file_name

-----------------------------------------------------------------------------------------------------------------
VIM Search and replace : http://vim.wikia.com/wiki/Search_and_replace
Basic search and replace:
	:%s/foo/bar/g		Find each occurrence of 'foo' (in all lines), and replace it with 'bar'.
	:s/foo/bar/g		Find each occurrence of 'foo' (in the current line only), and replace it with 'bar'.
	:%s/foo/bar/gc		Change each 'foo' to 'bar', but ask for confirmation first.
	:%s/\<foo\>/bar/gc	Change only whole words exactly matching 'foo' to 'bar'; ask for confirmation.
	:%s/foo/bar/gci		Change each 'foo' (case insensitive due to the i flag) to 'bar'; ask for confirmation.
	:%s/foo/bar/gcI		Change each 'foo' (case sensitive due to the I flag) to 'bar'; ask for confirmation.
	:5,12s/foo/bar/g	Change each 'foo' to 'bar' for all lines from line 5 to line 12 (inclusive).
-----------------------------------------------------------------------------------------------------------------
To comment out blocks in vim:
	press Esc (to leave editing or other mode)
	hit ctrl+v (visual block mode)
	use the up/down arrow keys to select lines you want (it won't highlight everything - it's OK!)
	Shift+i (capital I)
	insert the text you want, i.e. '% '
	press Esc
	Give it a second to work.

	To uncomment blocks in vim:
	press Esc (to leave editing or other mode)
	hit ctrl+v (visual block mode)
	use the up/down arrow keys to select the lines to uncomment.
	If you want to select multiple characters, use one or combine these methods:

	use the left/right arrow keys to select more text
	to select chunks of text use shift + left/right arrow key
	you can repeatedly push the delete keys below, like a regular delete button
	press d or x to delete characters, repeatedly if necessary

	press Esc

    Give it a second to work.

-----------------------------------------------------------------------------------------------------------------
Source: http://www.linuxjournal.com/magazine/vim-c-programmers
While editing a file with VIM, these command do their regular jobs.
:pwd  :cd

:e foo.c  --> Open foo.c
:e #      --> Return to the previously opened file.
:ls       --> Display the list of opened files in current VIM session
:bd <number> --> Close the file represented by number got from :ls
]]        --> Skip multiple functions fast. Use [[ to browse backwards.
:se list  --> Check which whitespaces are tabs. Whatever displayed as ^I in blue are tabs.
:se hlsearch -> TO highlight searches
set incsearch           " search as characters are entered
:se nohlsearch -> To turn off highlighting



%  --> Place cursor on brace/ or #if block and % shall take you to the matching brace.

gg=G  --> typing this in command mode indents the whole file.
:help indent.txt  --> learn more about indenting.
If ctags is enabled then, Ctrl-N or Crl-P does auto completion and possible hints.

Multiple files in different tabs in VIM-7
:tabe <file-name>  --> Open a file in new tab.
:tabn or :tabp to switch active tab.
Map keys <F7> to :tabp and <F8> to :tabn, write the below two lines in .vimrc file
:map <F7> :tabp<CR>
:map <F8> :tabn<CR>

Open the explorer in a horizontal ( :Sexplore ) or vertical ( :Vexplore ) split and exit the explorer using :q
Open the explorer in another tabpage using :Texplore and exit using :q

save and restore those tab sessions
:mksession header-files-work.vim
vim -S header-files-work.vim or :source header-files-work.vim
:mks!  save that back
-----------------------------------------------------------------------------------------------------------------
BOOKMARK cursor position:
Go to some line you want to bookmark by :22 and enter mb in command mode.
b is the name of line number 22. You can navigate to 22 by simple typing 'b
in command mode. (single quote + <mark name>)
-----------------------------------------------------------------------------------------------------------------
Selecting a text

V       - selects entire lines
v       - selects range of text
ctrl-v  - selects columns
gv      - reselect block

After selecting the text, try d to delete, or y to copy, or :s/match/replace/, or :center, or !sort, or...

u -> undo
CTRL + r -> redo

-----------------------------------------------------------------------------------------------------------------
Text folding:

set foldmethod=indent -> Nicely indents code blocks.
zj and zk move the cursor to next and previous folds.

At the cursor,
	za (toggle), zc (close), zo (open)  : One level of folding
	zA (toggle), zC (close), zO (open)  : All folding levels

Throughout the file:
	zm increases the foldlevel by one.
	zM closes all open folds.
	zr decreases the foldlevel by one.
	zR decreases the foldlevel to zero -- all folds will be open.

[z move tho start of open fold.
]z move to end of open fold.
-----------------------------------------------------------------------------------------------------------------

set expandtab      -> To insert space characters whenever the tab key is pressed
set tabstop=4      ->
set shiftwidth=4   -> To change the number of space characters inserted for indentation
set number
set relativenumber
set autoindent

set autoindent noexpandtab tabstop=4 shiftwidth=4  -> Set tab to tab. Don't replace with spaces.

highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red

Sometimes vimdiff screws up the color scheme. The best way to fix it is to enter
:highlight while inside vim. Then copy the values of the combination which looks good.
----  highlight trailing whitespaces.
If your goal is to:
    highlight trailing whitespace in red
    have this highlighting not appear whilst you are typing in insert mode
    have the highlighting of whitespace apply when you open new buffers
then the following 6 commands are what you should put into your .vimrc.

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
==========================================
Editor shortcuts:

Change character case: Use ~

=======
:set autoindent
:map <F7> :tabp<CR>
:map <F8> :tabn<CR>
:set number
:set relativenumber
:set hlsearch
:syntax on
-----------------------------------------

--------------------------
SHIFTING blocks visually
In normal mode: >> to indent the current line , or << to unindent.
In Inset mode: Ctrl + T indents the current line and Ctrl-D unindents.

CSCOPE http://cscope.sourceforge.net/cscope_vim_tutorial.html
https://agustinus.wordpress.com/2013/06/01/browsing-source-code-in-linux-vimcscope/

Type "CTRL-\ s" (Control-backslash, then just 's'). you can hit "CTRL-t"
Try the same search, but this time via "CTRL-spacebar s". This time, your Vim window will split in two horizontally , and the Cscope search result will be put in the new window. [if you've never used multiple Vim windows before: move between windows via 'CTRL-W w' (or CTRL-W arrow key, or CTRL-W h/j/k/l for left/up/down/right), close a window via 'CTRL-W c' (or good old ':q'), make the current window the only one via 'CTRL-W o', split a window into two via 'CTRL-W s' (or 'CTRL-W v' for a vertical split), open a file in a new window via ':spl[it] filename']

Stick the line below to make F3 work as "CTRL-\ s" either in .virmrc or the cscope plugin file downloaded from the above url
nmap <F3> :cs find s <C-R>=expand("<cword>")<CR><CR>

c: Find functions calling this function
d: Find functions called by this function
e: Find this egrep pattern
f: Find this file
g: Find this definition
i: Find files #including this file
s: Find this C symbol
t: Find this text string
:
------ JUMPS -----
`` -> goes to the same location on the line
'' -> goes to the beginning of the line
Ctrl + I ->
Ctrl + O ->
g; -> To move back in the list of your previous edit locations.
g. -> To move forward in the list of your edit locations.

Created and completed a new MCM https://mcm.amazon.com/cms/MCM-30432517 in favor of the old one

:set paste -> to fix the weird Ctrl-v when pasting in VIM.

Set wrap in vimdiff mode:
au VimEnter * if &diff | execute 'windo set wrap' | endif

:j! remove all clrf in vim
:j replace all clrf in vim with space

:set mouse=a  # Enable mouse support where the underlying system supports it.

Preserve last editing position in VIM https://stackoverflow.com/a/7894493/4608878
