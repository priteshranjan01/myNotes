############# COMPILING ####################
https://www.learncpp.com/cpp-tutorial/a1-static-and-dynamic-libraries/

Compiling a cpp file:
gcc hello.c   # For c files.
g++ Foo.h Foo.cpp  # For cpp files.

Compiler	Platform	Command
GCC	Linux, among others...	    g++ -std=c++0x example.cpp -o example_program
Clang	OS X, among others...	clang++ -std=c++11 -stdlib=libc++ example.cpp -o example_program

Ctags command for C++ project:
        ctags --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++

===> Find linker search path:
a483e7b9fa74:~ pritesr$ ld -v 2

===> Gcc search path:
a483e7b9fa74:~ pritesr$ echo | gcc -E -Wp,-v -

############ Basic data types and variable declaration ###############

int foo = 0;
auto bar = foo;  // the same as: int bar = foo;

int foo = 0;
decltype(foo) bar;  // the same as: int bar;

String:
#include <string>

string mystring = "This is a string";
string mystring ("This is a string");
string mystring {"This is a string"};

75         // int
75u        // unsigned int
75l        // long
75ul       // unsigned long
75lu       // unsigned long


3.14159    // 3.14159
6.02e23    // 6.02 x 10^23
1.6e-19    // 1.6 x 10^-19
3.0        // 3.0

#define PI 3.14159
#define NEWLINE '\n'

7 == 5+2 ? 4 : 3

int main ()
{
        int i, a, b;
        cout << "Please enter an integer value: ";
        cin >> i;
        cin >> a >> b;
        cout << "The value you entered is " << i;
        cout << " and its double is " << i*2 << ".\n";
        string mystr;
        cout << "What's your name? ";
        getline (cin, mystr);

        int bar [5] = { 10, 20, 30 };
        int x = foo[2];
        foo[0] = 99;
        int jimmy [3][5];
        char myword[] = { 'H', 'e', 'l', 'l', 'o', '\0' };
        return 0;

        char myntcs[] = "some text";
        string mystring = myntcs;  // convert c-string to string
        cout << mystring;          // printed as a library string
        cout << mystring.c_str();  // printed as a c-string

        // (note: both c_str and data members of string are equivalent)

        // Pointers

        int numbers[5];
        int * p;
        p = numbers;  *p = 10;
        p++;  *p = 20;
        p = &numbers[2];  *p = 30;
        p = numbers + 3;  *p = 40;
        p = numbers;  *(p+4) = 50;
        for (int n=0; n<5; n++)
        cout << numbers[n] << ", ";

        *p++   // same as *(p++): increment pointer, and dereference unincremented address
        *++p   // same as *(++p): increment pointer, and dereference incremented address
        ++*p   // same as ++(*p): dereference pointer, and increment the value it points to
        (*p)++ // dereference pointer, and post-increment the value it points to

        // new
        char* s = new char[size];
        delete []s;  // Delete an array.
        int * foo;
        foo = new int [5];
        int *p = new int(9); // single int initialized
        delete p;  // delete single element
        // / Enums

        enum class Colors: char {black, blue, green, cyan, red};
        Colors mycolor;

        mycolor = Colors::blue;
        if (mycolor == Colors::green) mycolor = Colors::red;

        bool b = true;
        std::cout << std::boolalpha << b << '\n';  // will print "true"
        std::cout << std::noboolalpha << b << '\n';  // will print 1

}

###### Special Members:

    Member function             	typical form for class C:

Constructors: https://docs.microsoft.com/en-us/cpp/cpp/constructors-cpp?view=vs-2019
    Default constructor	             C::C();
    Destructor	                     C::~C();
    Copy constructor	             C::C (const C&);
    Copy assignment	                 C& operator= (const C&);
    Move constructor	             C::C (C&&);
    Move assignment	                 C& operator= (C&&);

If no access level is specified for the inheritance, the compiler assumes private
for classes declared with keyword class and public for those declared with struct.

####### Virtual members

A virtual member is a member function that can be redefined in a derived class,
while preserving its calling properties through references. The syntax for a
function to become virtual is to precede its declaration with the virtual keyword.

######## C++ casts: http://www.cplusplus.com/doc/tutorial/typecasting/
  - static_cast:  operations are considered safe.
  - reinterpret_cast<type>: Highly unsafe. Just does bit by bit cast. AVOID.
  - dynamic_cast <type>: Used with classes.
  - const_cast <type>: Cast away const-ness. Something was const but make it not constant. AVOID.

######## EXCEPTIONS

    http://www.cplusplus.com/doc/tutorial/exceptions/

######## PREPROCESSOR
    http://www.cplusplus.com/doc/tutorial/preprocessor/

######## FILE IO
    http://www.cplusplus.com/doc/tutorial/files/

######## LAMBDA FUNCTIONS:
    https://www.cprogramming.com/c++11/c++11-lambda-closures.html

    auto functor = [=]() {

    }

######## Generics

######## Random numbers
srand() sets the seed which is used by rand to generate “random” numbers. If you don’t call srand before your first call to rand, it’s as if you had called srand(1) to set the seed to one.

######## Pointers https://docs.microsoft.com/en-us/cpp/cpp/pointers-cpp?view=vs-2019
smart pointers: https://docs.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=vs-2019

######## Boost:
Installation: https://www.boost.org/doc/libs/1_73_0/more/getting_started/unix-variants.html
I have boost unzipped in ~/madhav directory.
Compiling: g++ -I ~/madhav/cpp101/boost_1_73_0 boost_test.cpp

Boost.Asio defines boost::asio::io_service, a single class for an I/O service object. Every program based on Boost.Asio uses an object of type boost::asio::io_service.

######## Google Mock and Google Test
Use these two libraries to compile GoogleTest and GoogleMock libraries.
>> g++ -I /Users/pritesr/madhav/cpp101/googletest-release-1.8.0/googletest/include/  -I /Users/pritesr/madhav/cpp101/googletest-release-1.8.0/googlemock/include  googletest_tutorial.cpps

Better use Clang++
clang++ -std=c++11 googletest_tutorial.cpp -lgtest
https://chromium.googlesource.com/external/github.com/pwnall/googletest/+/HEAD/googlemock/README.md
https://chromium.googlesource.com/external/github.com/pwnall/googletest/+/HEAD/googlemock/docs/for_dummies.md

######## References:
            https://docs.microsoft.com/en-us/cpp/cpp/references-cpp?view=vs-2019
            http://thbecker.net/articles/rvalue_references/section_01.html
            http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2027.html
            
######## Perfect forwarding: https://medium.com/@dr3wc/understanding-move-semantics-and-perfect-forwarding-part-3-65575d523ff8
